@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --cell-width: 135px;
  /* Slightly taller default height for snake board cells */
  --cell-height: 80px;
}

body {
  font-family: Arial, Helvetica, sans-serif;
  @apply bg-background text-text overflow-x-hidden;
}

.hexagon {
  clip-path: polygon(25% 5%, 75% 5%, 100% 50%, 75% 95%, 25% 95%, 0% 50%);
}

.hex-table {
  clip-path: polygon(25% 5%, 75% 5%, 100% 50%, 75% 95%, 25% 95%, 0% 50%);
  /* Transparent background so the board remains visible */
  background: transparent;
  border: 4px solid #b22222;
}

.player-avatar {
  @apply w-12 h-12 rounded-full border border-yellow-400;
}

.starry-bg {
  background-color: #000;
  background-image:
    radial-gradient(#ffffff 1px, transparent 1px),
    radial-gradient(#ffffff 1px, transparent 1px);
  background-position:
    0 0,
    25px 25px;
  background-size: 50px 50px;
}

/* Gradient background for the Home page */
.home-gradient-bg {
  background-image:
    radial-gradient(circle at center, rgba(249, 179, 45, 0.2) 0%, rgba(249, 179, 45, 0) 60%),
    linear-gradient(to bottom, #0c1020 0%, #11172a 80%, #0c1020 100%);
  background-repeat: no-repeat;
  background-size: cover;
}

.board-3d {
  perspective: 800px;
}

.board-3d-grid {
  transform: rotateX(30deg) rotateZ(45deg);
  transform-style: preserve-3d;
}

.board-frame {
  @apply border-4 border-accent rounded-lg p-1 bg-surface;
  transform-style: preserve-3d;
}

/* Tilted view specifically for the Snake & Ladder board */
.snake-board-tilt {
  perspective: 1200px;
}

.snake-board-grid {
  transform-style: preserve-3d;
  transform-origin: bottom center;
  transition: transform 0.3s ease; /* ✅ scaling transition */
}

.snake-gradient-bg {
  position: absolute;
  /* rotate the backdrop 90deg so it runs from top to bottom */
  top: 50%;
  left: 50%;
  /* slightly taller backdrop */
  width: calc(var(--board-height) * 1.2);
  height: calc(var(--board-width) * 1.5);
  /* keep bottom in place by shifting upward */
  transform: translate(-50%, -60%) rotate(90deg) translateZ(-1px);
  transform-origin: center;
  /* widen the top of the backdrop while keeping the bottom unchanged */
  /* narrow the bottom of the backdrop so it fits the board */
  /* widen the top a bit more so the background fills the screen */
  /* widen the top even more so the backdrop fills the screen */
  /* widen the top further so the background spans the full screen */
  /* Slightly widen the top so the backdrop fills the screen */
  /* taper the bottom so the backdrop fits the board */
  clip-path: polygon(-200% 0, 300% 0, 80% 100%, 20% 100%);
  pointer-events: none;
  z-index: 0;
  background: linear-gradient(
    to top,
    #123840,
    #1f4d58 20%,
    #d9cec2 40%,
    #f3f0e8 50%,
    #b95741 60%,
    #e7b382 80%,
    #f3d3b0
  );
}

@keyframes roll {
  0% {
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg) translateY(0);
  }
  50% {
    transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg) translateY(-1rem);
  }
  100% {
    transform: rotateX(720deg) rotateY(720deg) rotateZ(720deg) translateY(0);
  }
}

.animate-roll {
  animation: roll 1s ease-in-out;
}

.dice-container {
  perspective: 600px;
}

.dice-cube {
  @apply relative w-12 h-12 bg-white rounded-xl;
  transform-style: preserve-3d;
  transition: transform 0.5s;
}

.dice-face {
  @apply absolute w-full h-full flex items-center justify-center bg-white rounded-xl shadow-lg;
}

.dice-face .dot {
  @apply w-3 h-3 bg-black rounded-full;
}

.dice-face--front {
  transform: rotateY(0deg) translateZ(1.5rem);
}
.dice-face--back {
  transform: rotateY(180deg) translateZ(1.5rem);
}
.dice-face--right {
  transform: rotateY(90deg) translateZ(1.5rem);
}
.dice-face--left {
  transform: rotateY(-90deg) translateZ(1.5rem);
}
.dice-face--top {
  transform: rotateX(90deg) translateZ(1.5rem);
}
.dice-face--bottom {
  transform: rotateX(-90deg) translateZ(1.5rem);
}

.board-cell {
  @apply relative flex items-center justify-center rounded-xl text-text;
  background-color: var(--tile-bg, #0e3b45);
  border: 2px solid #d1a75f;
  /* Removed dark drop shadow that created a black frame around dice */
  box-shadow: none;
  transform: translateZ(5px);
  transform-style: preserve-3d;
  overflow: visible;
  width: var(--cell-width);
  height: var(--cell-height);
}

.board-cell::after {
  content: "";
  position: absolute;
  inset: 2px;
  border-radius: inherit;
  box-shadow: 0 0 8px rgba(209, 167, 95, 0.5);
  transform: translateZ(-1px);
}

.token {
  @apply absolute w-16 h-16 rounded-full shadow-lg object-cover;
  transform: translateZ(10px);
}

/* Player photo on a hexagonal cylinder */
/* Deprecated hexagonal token - kept for reference */
.player-token {
  position: absolute;
  width: 4rem;
  height: 4rem;
  transform-style: preserve-3d;
  transform: translateZ(10px);
  --cyl-h: 1.5rem; /* half of dice size */
  --token-radius: 2rem;
  --cyl-apothem: calc(var(--token-radius) * 0.866); /* distance from center */
  --side-color: #facc15; /* default amber */
  --border-color: #d97706;
}

/* New cube-style token */
.token-cube {
  position: absolute;
  width: 4rem;
  height: 4rem;
  transform: translateZ(10px);
  transform-style: preserve-3d;
  --side-color: #fde047; /* yellow-300 */
  --border-color: #d97706; /* amber-600 */
}

/* Dice-style token replacing player photo */
.token-dice {
  position: absolute;
  width: 4rem;
  height: 4rem;
  transform: translateZ(10px);
  transform-style: preserve-3d;
}

.token-dice .dice-cube {
  width: 100%;
  height: 100%;
}

.token-dice .dice-face {
  background-color: #dc2626; /* red dice */
  border: 1px solid #991b1b;
  border-radius: 0.5rem;
}

.token-dice .dice-face .dot {
  background-color: #fff;
}

/* Three.js token container */
.token-three {
  position: absolute;
  /* shrink token by another 20% */
  width: 7.2rem;
  height: 7.2rem;
  /* lower the token an additional 5% */
  transform: translateZ(34.2px);
  /* Preserve 3D space so the photo can be positioned in depth */
  transform-style: preserve-3d;
  pointer-events: none;
}

.token-three.jump {
  animation: token-jump 0.4s ease-out;
}

@keyframes token-jump {
  0%, 100% {
    transform: translateZ(34.2px);
  }
  50% {
    transform: translateY(-20px) translateZ(34.2px);
  }
}

.pot-token {
  /* keep pot token scaled relative to player token */
  width: 9rem; /* 25% bigger than the reduced token */
  height: 9rem;
}

.token-three canvas {
  width: 100%;
  height: 100%;
  display: block;
}

.token-photo {
  position: absolute;
  /* enlarge photo by 5% and lower it proportionally */
  width: 2.9rem;
  height: 2.9rem;
  top: 50%;
  left: 50%;
  transform-origin: bottom center;
  /* Align the photo with the top face of the token and tilt upward */
  transform: translate(-50%, -50%) translateZ(15.2px)
    rotateX(calc(var(--board-angle, 60deg) * -1 - 10deg));
  object-fit: cover;
  border-radius: 50%;
  border: 2px solid #ffd700;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);
  pointer-events: none;
  z-index: 1;
}

.token-cube-inner {
  position: relative;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  /* Align token with board surface while showing a slight side angle */
  transform: rotateX(calc(var(--board-angle, 60deg) * -1 - 20deg)) rotateY(25deg);
}

.cube-face {
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: var(--side-color);
  border: 1px solid var(--border-color);
  border-radius: 0.5rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
}

.cube-top {
  object-fit: cover;
  background-color: transparent;
  transform: rotateX(90deg) translateZ(2rem);
}

.cube-bottom {
  transform: rotateX(-90deg) translateZ(2rem);
}

.cube-front {
  transform: rotateY(0deg) translateZ(2rem);
}

.cube-back {
  transform: rotateY(180deg) translateZ(2rem);
}

.cube-right {
  transform: rotateY(90deg) translateZ(2rem);
}

.cube-left {
  transform: rotateY(-90deg) translateZ(2rem);
}

.token-top {
  @apply w-full h-full object-cover;
  clip-path: polygon(25% 5%, 75% 5%, 100% 50%, 75% 95%, 25% 95%, 0% 50%);
  position: absolute;
  top: 0;
  left: 0;
  transform: translateZ(var(--cyl-h));
}

.token-base {
  @apply w-full h-full absolute;
  clip-path: polygon(25% 5%, 75% 5%, 100% 50%, 75% 95%, 25% 95%, 0% 50%);
  background-color: var(--side-color, #facc15);
  border: 1px solid var(--border-color, #d97706);
  top: calc(100% + var(--cyl-h));
  left: 0;
  transform: translateZ(0);
}

.hex-cylinder {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  height: var(--cyl-h);
  transform-style: preserve-3d;
  transform-origin: center bottom;
}

.token-pillar {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  height: var(--cyl-h);
  transform-style: preserve-3d;
  transform-origin: center bottom;
}

.pillar-face {
  position: absolute;
  left: calc(50% - var(--token-radius) / 2);
  width: var(--token-radius);
  height: 100%;
  background-color: var(--side-color, #facc15);
  border: 1px solid var(--border-color, #d97706);
}

.pillar-front {
  transform: rotateY(0deg) translateZ(var(--cyl-apothem));
}
.pillar-right {
  transform: rotateY(-60deg) translateZ(var(--cyl-apothem));
}
.pillar-left {
  transform: rotateY(60deg) translateZ(var(--cyl-apothem));
}

.hex-side {
  position: absolute;
  left: calc(50% - var(--token-radius) / 2);
  width: var(--token-radius);
  height: 100%;
  background-color: var(--side-color, #facc15);
  border: 1px solid var(--border-color, #d97706);
}

.side-1 { transform: rotateY(0deg) translateZ(var(--cyl-apothem)); }
.side-2 { transform: rotateY(60deg) translateZ(var(--cyl-apothem)); }
.side-3 { transform: rotateY(120deg) translateZ(var(--cyl-apothem)); }
.side-4 { transform: rotateY(180deg) translateZ(var(--cyl-apothem)); }
.side-5 { transform: rotateY(240deg) translateZ(var(--cyl-apothem)); }
.side-6 { transform: rotateY(300deg) translateZ(var(--cyl-apothem)); }

/* Token color variations */
.token-yellow {
  --side-color: #fde047; /* yellow-300 */
  --border-color: #d97706; /* amber-600 */
}

.token-red {
  --side-color: #fca5a5; /* red-300 */
  --border-color: #b91c1c; /* red-700 */
}

.token-green {
  --side-color: #86efac; /* green-300 */
  --border-color: #16a34a; /* green-700 */
}

.board-cell.highlight {
  box-shadow: 0 0 10px 4px rgba(250, 204, 21, 0.8);
}

.board-cell.normal-highlight {
  background-color: #fde047; /* yellow-300 */
}

.board-cell.ladder-cell.normal-highlight,
.board-cell.snake-cell.normal-highlight {
  background-color: #fde047; /* yellow-300 */
}

.board-cell.ladder-highlight {
  background-color: #86efac; /* green-300 */
}

.board-cell.snake-highlight {
  background-color: #fca5a5; /* red-300 */
}

.board-cell.ladder-cell.ladder-highlight {
  background-color: #86efac; /* green-300 */
}

.board-cell.snake-cell.snake-highlight {
  background-color: #fca5a5; /* red-300 */
}

/* Indicate ladder or snake on the board */
.board-cell.ladder-cell {
  background-color: #86efac; /* green-300 */
}

.board-cell.snake-cell {
  background-color: #fca5a5; /* red-300 */
}

.cell-marker {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  align-items: center;
  gap: 2px;
  pointer-events: none;
}

.cell-icon {
  font-size: 1.5rem; /* slightly larger for better visibility */
  line-height: 1;
}

.cell-offset {
  font-size: 1rem;
  line-height: 1;
  color: #ffffff;
  font-weight: bold;
}

.cell-number {
  position: relative;
  z-index: 1;
  color: #ffffff;
  text-shadow: 0 1px 0 #cdd5d6;
}

.board-cell.snake-cell .cell-number,
.board-cell.ladder-cell .cell-number {
  visibility: hidden;
}

.board-cell.snake-cell,
.board-cell.ladder-cell {
  color: #ffffff;
}

.pot-cell {
  @apply absolute flex flex-col items-center justify-center;
  width: calc(var(--cell-width) * 1.8);
  height: calc(var(--cell-height) * 1.8);
  /* move the pot even higher above the board */
  top: calc(var(--cell-height) * -5.5);
  left: 50%;
  transform: translateX(-50%) translateZ(8px);
  z-index: 15;
  background-color: transparent;
  border: none;
  box-shadow: none;
}

.pot-icon {
  position: absolute;
  width: 12rem;
  height: 12rem;
  top: 40%;
  left: 50%;
  transform-origin: bottom center;
  transform: translate(-50%, -50%) translateZ(20px)
    rotateX(calc(var(--board-angle, 60deg) * -1 - 10deg)) rotateY(0deg);
  animation: pot-spin 6s linear infinite;
  object-fit: contain;
  pointer-events: none;
  z-index: 1;
}

.pot-number {
  position: absolute;
  bottom: -1rem;
  left: 50%;
  transform: translateX(-50%);
  font-weight: bold;
  color: #ffffff;
  z-index: 1;
}

.coin-stack {
  position: absolute;
  bottom: 0.2rem;
  left: 50%;
  transform: translateX(-50%);
  pointer-events: none;
}

.coin-stack-img {
  position: absolute;
  width: 4.8rem;
  height: 4.8rem;
  left: 50%;
  transform: translateX(-50%);
  object-fit: contain;
}

.pot-cell.highlight {
  box-shadow: 0 0 10px 4px rgba(250, 204, 21, 0.8);
}

.logo-wall-main {
  @apply absolute flex items-center justify-center;
  width: calc(var(--cell-width) * 6); /* larger logo width */
  height: calc(var(--cell-height) * 5); /* taller logo */
  /* move the logo even higher above the board */
  top: calc(var(--cell-height) * -9.5 - var(--cell-height) * 1.8 * (var(--final-scale, 1) - 1)); /* adjust for scaled top row */
  left: 50%;
  transform: translateX(-50%) rotateX(calc(var(--board-angle, 60deg) * -1)) translateZ(-40px) scale(1.8); /* larger logo */
  transform-origin: bottom center;
  background-image: url("/assets/TonPlayGramLogo.jpg");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center;
  z-index: 5;
}


.snake-connector,
.ladder-connector {
  position: absolute;
  height: 12px;
  transform-origin: 0 50%;
  z-index: 2;
}

.snake-connector {
  background-image: url("/assets/icons/snake.png");
  background-size: 100% 100%;
  background-repeat: no-repeat;
  border-radius: 4px;
}

.ladder-connector {
  background-image: url("/assets/icons/ladder.png");
  background-size: 100% 100%;
  background-repeat: no-repeat;
}

.board-marker {
  position: absolute;
  transform: translate(-50%, -50%) translateZ(6px);
}

.snake-marker,
.ladder-marker {
  font-size: 1.5rem;
  line-height: 1;
  display: flex;
  align-items: center;
  justify-content: center;
}

.snake-marker::before {
  content: "🐍";
}

.ladder-marker::before {
  content: "🪜";
}

.coin-burst {
  position: absolute;
  left: 50%;
  bottom: 0;
  width: 0;
  height: 0;
  pointer-events: none;
  overflow: visible;
}

.coin-img {
  position: absolute;
  left: -10px;
  bottom: 0;
  width: 20px;
  height: 20px;
  transform: translate(-50%, 0);
  animation-name: coin-up;
  animation-duration: var(--dur);
  animation-delay: var(--delay);
  animation-timing-function: ease-out;
  animation-fill-mode: forwards;
}

@keyframes coin-up {
  to {
    transform: translate(calc(-50% + var(--dx)), -120px);
    opacity: 0;
  }
}

.popup-offset {
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translate(-50%, 0);
  pointer-events: none;
  font-size: 3rem;
  animation: popup-move 1s ease-out forwards;
}

@keyframes popup-move {
  from {
    opacity: 1;
    transform: translate(-50%, 0);
  }
  to {
    opacity: 0;
    transform: translate(-50%, -30px);
  }
}

.token-hexagon {
  position: absolute;
  width: 2.9rem;
  height: 2.9rem;
  background-color: #fde047;
  clip-path: polygon(25% 5%, 75% 5%, 100% 50%, 75% 95%, 25% 95%, 0% 50%);
  left: 50%;
  top: 50%;
  pointer-events: none;
  /* Align with the token photo but sit just underneath */
  transform: translate(-50%, -50%) translateZ(14.2px)
    rotateX(calc(var(--board-angle, 60deg) * -1 - 10deg));
  animation: hex-spin 10.5s linear infinite;
  z-index: 1;
}

.token-hexagon.step {
  background-color: #4b5563; /* dark gray */
}

@keyframes pot-spin {
  from {
    transform: translate(-50%, -50%) translateZ(20px)
      rotateX(calc(var(--board-angle, 60deg) * -1 - 10deg)) rotateY(0deg);
  }
  to {
    transform: translate(-50%, -50%) translateZ(20px)
      rotateX(calc(var(--board-angle, 60deg) * -1 - 10deg)) rotateY(360deg);
  }
}

@keyframes hex-spin {
  from {
    transform: translate(-50%, -50%) translateZ(14.2px)
      rotateX(calc(var(--board-angle, 60deg) * -1 - 10deg))
      rotateY(0deg);
  }
  to {
    transform: translate(-50%, -50%) translateZ(14.2px)
      rotateX(calc(var(--board-angle, 60deg) * -1 - 10deg))
      rotateY(360deg);
  }
}

.dice-marker {
  position: absolute;
  width: 1.8rem;
  height: 1.8rem;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%) translateZ(6px);
  display: flex;
  align-items: center;
  justify-content: center;
  pointer-events: none;
  z-index: 2;
}

.dice-marker img {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.dice-value {
  position: absolute;
  bottom: -0.4rem;
  right: -0.4rem;
  font-size: 0.75rem;
  font-weight: bold;
  color: #000;
}
